output %>% kbl() %>% kable_styling()
drift.rate<- output %>%
filter(parameter %in% c('v_Intercept','v_RewardLevel','v_PenaltyLevel',,'v_dACCsal','v_Str','v_AI'))
drift.rate<- output %>%
filter(parameter %in% c('v_Intercept','v_RewardLevel','v_PenaltyLevel',,'v_dACCsal','v_Str','v_AI'))
output
# Use test.params function to process trace info
output <- test.params(traces)
output %>% kbl() %>% kable_styling()
drift.rate<- output %>%
filter(parameter %in% c('v_Intercept','v_RewardLevel','v_PenaltyLevel','v_dACCsal','v_Str','v_AI'))
threshold<- output %>%
filter(parameter %in% c('a_Intercept','a_RewardLevel','a_PenaltyLevel','a_dACCsal','a_Str','a_AI'))
va <- rbind(drift.rate,threshold) %>%
separate(col = parameter, sep = "_", into = c("parameter","condition")) %>%
mutate(condition = factor(condition, levels = c("Intercept", "RewardLevel","PenaltyLevel","dACCctrl","dACCsal","Str","AI")),
parameter = factor(parameter, levels = c("a","v"), labels = c("Threshold","Drift Rate")))
va.sub <- va %>% filter(condition != "Intercept")
plot.parameters<-ggplot(data = va.sub, aes(x = parameter, y = Mean, fill = condition)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.5), width = 0.5) +
geom_errorbar(width = .1, linewidth = 1, position = position_dodge(width = .5), aes(ymin = CI_lower, ymax = CI_upper)) +
scale_y_continuous(labels = function(x) sprintf("%.1f", x)) +
coord_cartesian(ylim=c(-0.15,0.15)) +
ggtitle(paste0(model_str," Parameter Estimates")) +
ylab("Estimate") + xlab("") +
geom_hline(yintercept=0) +
#scale_fill_manual(name = "", labels = c("Reward","Penalty","Reward.Penalty"), values = colors.va3) +
ggposterior
plot.parameters
plot.parameters.va.int<-ggplot(data = va.sub, aes(x = condition, y = Mean, fill = parameter)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.5), width = 0.5, color = "black") +
geom_errorbar(width = .1, linewidth = 1, position = position_dodge(width = .5), aes(ymin = CI_lower, ymax = CI_upper)) +
scale_y_continuous(labels = function(x) sprintf("%.1f", x)) +
coord_cartesian(ylim=c(-0.15,0.15)) +
ggtitle(paste0(model_str," Parameter Estimates")) +
ylab("Estimate") + xlab("") +
geom_hline(yintercept=0) +
scale_fill_manual(name="", labels = c("Threshold","Drift Rate"), values=colors.va2) +
scale_x_discrete(labels= c("Reward","Penalty","dACC-ctrl","dACC-sal","Str","AI")) +
ggposterior
plot.parameters.va.int
plot.parameters.va.int.talk<-ggplot(data = va.sub, aes(x = condition, y = Mean, fill = parameter)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.5), width = 0.5, color = "black") +
geom_errorbar(width = .1, linewidth = 1, position = position_dodge(width = .5), aes(ymin = CI_lower, ymax = CI_upper)) +
scale_y_continuous(labels = function(x) sprintf("%.1f", x)) +
coord_cartesian(ylim=c(-0.15,0.15)) +
ggtitle(paste0(model_str," Parameter Estimates")) +
ylab("Estimate") + xlab("") +
geom_hline(yintercept=0) +
scale_fill_manual(name="", labels = c("Threshold","Drift Rate"), values=colors.va2) +
scale_x_discrete(labels= c("Reward","Penalty","dACC-ctrl","dACC-sal","Str","AI")) +
ggposterior +
theme(legend.position.inside = c(.95,.2))
plot.parameters.va.int.talk
# save parameter estimates figure
ggsave(filename = paste0(datapath.TCBmanuscript,"ddm/", model_str,"_parameters.png"), plot = plot.parameters, device = "png", width = 6, height = 5, scale = 1.2)
ggsave(filename = paste0(datapath.TCBmanuscript,"ddm/", model_str,"_parameters.eps"), plot = plot.parameters, device = cairo_ps, width = 6, height = 5, scale = 1.2)
ggsave(filename = paste0(datapath.TCBmanuscript,"ddm/", model_str,"_parameters_condition_int.png"), plot = plot.parameters.va.int, device = "png", width = 10, height = 8)
ggsave(filename = paste0(datapath.TCBmanuscript,"ddm/", model_str,"_parameters_condition_int.eps"), plot = plot.parameters.va.int, device = cairo_ps, width = 10, height = 8)
ggsave(filename = paste0(datapath.TCBmanuscript,"ddm/", model_str,"_parameters_condition_int_NIDA.png"), plot = plot.parameters.va.int.talk, device = "png", width = 8, height = 6)
# Model Name
model_str = "model120"
# Rhats
df.rhats<-fread(input = paste0(datapath.ddm,model_str,"/",model_str,"_RHat.csv"), header = TRUE)
# Model Name
model_str = "model20"
# Rhats
df.rhats<-fread(input = paste0(datapath.ddm,model_str,"/",model_str,"_RHat.csv"), header = TRUE)
colnames(df.rhats) = c("parameter","Rhat")
# Traces
df.traces<-fread(input = paste0(datapath.ddm,model_str,"/",model_str,"_traces.csv"))
# Set parameters for plots
myColors = brewer.pal(3,"Set2") #colors
barfill <- "#4271AE"
barlines <- "#1F3552"
plot.rhat=ggplot(df.rhats, aes(Rhat)) +
geom_histogram(colour = barlines, fill = barfill,binwidth = 0.01)+ #colour = barlines, fill = barfill
theme_bw() +
ggtitle(paste0(model_str," Rhats")) +
labs(x = "Rhat", y = "Count\n")+
theme(axis.line = element_line(linewidth = 1, colour = "black"),
panel.grid.major = element_line(colour = "grey", linewidth = 0.1,linetype = "dashed"),
panel.grid.minor = element_line(colour = "grey", linewidth = 0.1,linetype = "dashed"),
panel.border = element_blank(),
panel.background = element_blank(),
plot.title = element_text(size = 18,  face = "bold",hjust = 0.5),
text=element_text(colour="black", size = 14),
axis.text.x=element_text(colour="black", size = 14),
axis.text.y=element_text(colour="black", size = 14, face = "plain",hjust=0),
axis.title=element_text(size=18,colour = "black",vjust = 1))
plot.rhat
# save rhat figure
ggsave(filename = paste0(datapath.TCBmanuscript,"ddm/", model_str,"_rhat.png"), plot = plot.rhat, device = "png", width = 6, height = 5)
ggsave(filename = paste0(datapath.TCBmanuscript,"ddm/", model_str,"_rhat.eps"), plot = plot.rhat, device = cairo_ps, width = 6, height = 5)
# Print the names of the high Rhat parameters
highRhats = subset(df.rhats,df.rhats$Rhat>1.1)
if (nrow(highRhats) == 0) {
print("All Rhats are below 1.1")
} else {
print("Some Rhats higher than 1.1")
highRhats
}
# Select the traces for relevant group-level parameters. Note that threshold (a) needs to be divided by 2.
traces<-df.traces %>% dplyr::select(v_Intercept,
`v_C(RewardLevel, Sum)[S.High Reward]`,
`v_C(PenaltyLevel, Sum)[S.High Penalty]`,
`v_C(Congruency, Sum)[S.Congruent]`,
a_Intercept,
`a_C(RewardLevel, Sum)[S.High Reward]`,
`a_C(PenaltyLevel, Sum)[S.High Penalty]`,
a_scaledRunningTime,
`z_C(Congruency, Sum)[S.Congruent]`,
sv, st, t,
v_scaled_dACC_ctrl_interval,
a_scaled_dACC_ctrl_interval) %>%
dplyr::rename(v_RewardLevel = `v_C(RewardLevel, Sum)[S.High Reward]`,
v_PenaltyLevel = `v_C(PenaltyLevel, Sum)[S.High Penalty]`,
v_Congruency =`v_C(Congruency, Sum)[S.Congruent]`,
v_dACCctrl = v_scaled_dACC_ctrl_interval,
a_RewardLevel = `a_C(RewardLevel, Sum)[S.High Reward]`,
a_PenaltyLevel = `a_C(PenaltyLevel, Sum)[S.High Penalty]`,
a_dACCctrl = a_scaled_dACC_ctrl_interval,
z_Congruency = `z_C(Congruency, Sum)[S.Congruent]`) %>%
mutate(a_Intercept = 0.5*a_Intercept,
a_RewardLevel = 0.5*a_RewardLevel,
a_PenaltyLevel = 0.5*a_PenaltyLevel,
a_scaledRunningTime = 0.5*a_scaledRunningTime,
a_dACCctrl = 0.5*a_dACCctrl)
# Extract the traces to plot
numSims = 5 # SET THIS PARAMETER BASED ON NUMBER OF SIMULATIONS
numTraces = dim(traces)[1]/numSims
index_traces = data.frame(ix1=1:5,ix2=(1:numSims)*numTraces)
index_traces$ix1[2:numSims] = index_traces$ix2[1:numSims-1]+1
# Extract traces for each simulation
plot_data1 = traces[index_traces[1,1]:index_traces[1,2]]
plot_data2 = traces[index_traces[2,1]:index_traces[2,2]]
plot_data3 = traces[index_traces[3,1]:index_traces[3,2]]
plot_data4 = traces[index_traces[4,1]:index_traces[4,2]]
plot_data5 = traces[index_traces[5,1]:index_traces[5,2]]
# For each parameter, plot the traces
colNames=names(traces)
for (parameter in colNames) { # for testing: parameter=colNames[1]
# plot traces
traces_plot = ggplot(NULL) +
geom_line(data=plot_data1, mapping = aes_string(y=parameter, x = 1:numTraces), colour="red") +         # Chain 1
geom_line(data=plot_data2, mapping = aes_string(y=parameter, x = 1:numTraces), colour="royalblue1") +  # Chain 2
geom_line(data=plot_data3, mapping = aes_string(y=parameter, x = 1:numTraces), colour="springgreen") + # Chain 3
geom_line(data=plot_data4, mapping = aes_string(y=parameter, x = 1:numTraces), colour="grey0") +       # Chain 4
geom_line(data=plot_data5, mapping = aes_string(y=parameter, x = 1:numTraces), colour="coral") +       # Chain 5
theme_classic(base_size = 18) +
ggtitle(parameter) +
ylab("Parameter value") + xlab("Sample")
plot_params <- ggplot(traces, aes_string(x = parameter)) +
geom_histogram(bins = 50) +
theme_classic()
#print(traces_plot)
grid.arrange(traces_plot, plot_params)
}
# Use test.params function to process trace info
output <- test.params(traces)
output %>% kbl() %>% kable_styling()
drift.rate<- output %>%
filter(parameter %in% c('v_Intercept','v_RewardLevel','v_PenaltyLevel','v_dACCctrl','v_Str','v_AI'))
threshold<- output %>%
filter(parameter %in% c('a_Intercept','a_RewardLevel','a_PenaltyLevel','a_dACCctrl','a_Str','a_AI'))
va <- rbind(drift.rate,threshold) %>%
separate(col = parameter, sep = "_", into = c("parameter","condition")) %>%
mutate(condition = factor(condition, levels = c("Intercept", "RewardLevel","PenaltyLevel","dACCctrl","dACCsal","Str","AI")),
parameter = factor(parameter, levels = c("a","v"), labels = c("Threshold","Drift Rate")))
va.sub <- va %>% filter(condition != "Intercept")
plot.parameters<-ggplot(data = va.sub, aes(x = parameter, y = Mean, fill = condition)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.5), width = 0.5) +
geom_errorbar(width = .1, linewidth = 1, position = position_dodge(width = .5), aes(ymin = CI_lower, ymax = CI_upper)) +
scale_y_continuous(labels = function(x) sprintf("%.1f", x)) +
coord_cartesian(ylim=c(-0.15,0.15)) +
ggtitle(paste0(model_str," Parameter Estimates")) +
ylab("Estimate") + xlab("") +
geom_hline(yintercept=0) +
#scale_fill_manual(name = "", labels = c("Reward","Penalty","Reward.Penalty"), values = colors.va3) +
ggposterior
plot.parameters
plot.parameters.va.int<-ggplot(data = va.sub, aes(x = condition, y = Mean, fill = parameter)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.5), width = 0.5, color = "black") +
geom_errorbar(width = .1, linewidth = 1, position = position_dodge(width = .5), aes(ymin = CI_lower, ymax = CI_upper)) +
scale_y_continuous(labels = function(x) sprintf("%.1f", x)) +
coord_cartesian(ylim=c(-0.15,0.15)) +
ggtitle(paste0(model_str," Parameter Estimates")) +
ylab("Estimate") + xlab("") +
geom_hline(yintercept=0) +
scale_fill_manual(name="", labels = c("Threshold","Drift Rate"), values=colors.va2) +
scale_x_discrete(labels= c("Reward","Penalty","dACC-ctrl","dACC-sal","Str","AI")) +
ggposterior
plot.parameters.va.int
# save parameter estimates figure
ggsave(filename = paste0(datapath.TCBmanuscript,"ddm/", model_str,"_parameters.png"), plot = plot.parameters, device = "png", width = 6, height = 5, scale = 1.2)
ggsave(filename = paste0(datapath.TCBmanuscript,"ddm/", model_str,"_parameters.eps"), plot = plot.parameters, device = cairo_ps, width = 6, height = 5, scale = 1.2)
ggsave(filename = paste0(datapath.TCBmanuscript,"ddm/", model_str,"_parameters_condition_int.png"), plot = plot.parameters.va.int, device = "png", width = 10, height = 8)
ggsave(filename = paste0(datapath.TCBmanuscript,"ddm/", model_str,"_parameters_condition_int.eps"), plot = plot.parameters.va.int, device = cairo_ps, width = 10, height = 8)
output %>% kbl() %>% kable_styling()
# Use test.params function to process trace info
output <- test.params(traces)
output %>% kbl() %>% kable_styling()
drift.rate<- output %>%
filter(parameter %in% c('v_Intercept','v_RewardLevel','v_PenaltyLevel','v_dACCctrl','v_Str','v_AI'))
threshold<- output %>%
filter(parameter %in% c('a_Intercept','a_RewardLevel','a_PenaltyLevel','a_dACCctrl','a_Str','a_AI'))
va <- rbind(drift.rate,threshold) %>%
separate(col = parameter, sep = "_", into = c("parameter","condition")) %>%
mutate(condition = factor(condition, levels = c("Intercept", "RewardLevel","PenaltyLevel","dACCctrl","dACCsal","Str","AI")),
parameter = factor(parameter, levels = c("a","v"), labels = c("Threshold","Drift Rate")))
va.sub <- va %>% filter(condition != "Intercept")
plot.parameters<-ggplot(data = va.sub, aes(x = parameter, y = Mean, fill = condition)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.5), width = 0.5) +
geom_errorbar(width = .1, linewidth = 1, position = position_dodge(width = .5), aes(ymin = CI_lower, ymax = CI_upper)) +
scale_y_continuous(labels = function(x) sprintf("%.1f", x)) +
coord_cartesian(ylim=c(-0.15,0.15)) +
ggtitle(paste0(model_str," Parameter Estimates")) +
ylab("Estimate") + xlab("") +
geom_hline(yintercept=0) +
#scale_fill_manual(name = "", labels = c("Reward","Penalty","Reward.Penalty"), values = colors.va3) +
ggposterior
plot.parameters
plot.parameters.va.int<-ggplot(data = va.sub, aes(x = condition, y = Mean, fill = parameter)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.5), width = 0.5, color = "black") +
geom_errorbar(width = .1, linewidth = 1, position = position_dodge(width = .5), aes(ymin = CI_lower, ymax = CI_upper)) +
scale_y_continuous(labels = function(x) sprintf("%.1f", x)) +
coord_cartesian(ylim=c(-0.15,0.15)) +
ggtitle(paste0(model_str," Parameter Estimates")) +
ylab("Estimate") + xlab("") +
geom_hline(yintercept=0) +
scale_fill_manual(name="", labels = c("Threshold","Drift Rate"), values=colors.va2) +
scale_x_discrete(labels= c("Reward","Penalty","dACC-ctrl","dACC-sal","Str","AI")) +
ggposterior
plot.parameters.va.int
# save parameter estimates figure
ggsave(filename = paste0(datapath.TCBmanuscript,"ddm/", model_str,"_parameters.png"), plot = plot.parameters, device = "png", width = 6, height = 5, scale = 1.2)
ggsave(filename = paste0(datapath.TCBmanuscript,"ddm/", model_str,"_parameters.eps"), plot = plot.parameters, device = cairo_ps, width = 6, height = 5, scale = 1.2)
ggsave(filename = paste0(datapath.TCBmanuscript,"ddm/", model_str,"_parameters_condition_int.png"), plot = plot.parameters.va.int, device = "png", width = 10, height = 8)
ggsave(filename = paste0(datapath.TCBmanuscript,"ddm/", model_str,"_parameters_condition_int.eps"), plot = plot.parameters.va.int, device = cairo_ps, width = 10, height = 8)
plot.parameters.va.int<-ggplot(data = va.sub, aes(x = condition, y = Mean, fill = parameter)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.5), width = 0.5, color = "black") +
geom_errorbar(width = .1, linewidth = 1, position = position_dodge(width = .5), aes(ymin = CI_lower, ymax = CI_upper)) +
scale_y_continuous(labels = function(x) sprintf("%.1f", x)) +
coord_cartesian(ylim=c(-0.2,0.15)) +
ggtitle(paste0(model_str," Parameter Estimates")) +
ylab("Estimate") + xlab("") +
geom_hline(yintercept=0) +
scale_fill_manual(name="", labels = c("Threshold","Drift Rate"), values=colors.va2) +
scale_x_discrete(labels= c("Reward","Penalty","dACC-ctrl","dACC-sal","Str","AI")) +
ggposterior
plot.parameters.va.int
plot.parameters.va.int<-ggplot(data = va.sub, aes(x = condition, y = Mean, fill = parameter)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.5), width = 0.5, color = "black") +
geom_errorbar(width = .1, linewidth = 1, position = position_dodge(width = .5), aes(ymin = CI_lower, ymax = CI_upper)) +
scale_y_continuous(labels = function(x) sprintf("%.1f", x)) +
coord_cartesian(ylim=c(-0.3,0.15)) +
ggtitle(paste0(model_str," Parameter Estimates")) +
ylab("Estimate") + xlab("") +
geom_hline(yintercept=0) +
scale_fill_manual(name="", labels = c("Threshold","Drift Rate"), values=colors.va2) +
scale_x_discrete(labels= c("Reward","Penalty","dACC-ctrl","dACC-sal","Str","AI")) +
ggposterior
plot.parameters.va.int
plot.parameters.va.int<-ggplot(data = va.sub, aes(x = condition, y = Mean, fill = parameter)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.5), width = 0.5, color = "black") +
geom_errorbar(width = .1, linewidth = 1, position = position_dodge(width = .5), aes(ymin = CI_lower, ymax = CI_upper)) +
scale_y_continuous(labels =4,0.15)) +
plot.parameters.va.int<-ggplot(data = va.sub, aes(x = condition, y = Mean, fill = parameter)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.5), width = 0.5, color = "black") +
geom_errorbar(width = .1, linewidth = 1, position = position_dodge(width = .5), aes(ymin = CI_lower, ymax = CI_upper)) +
scale_y_continuous(labels = function(x) sprintf("%.1f", x)) +
coord_cartesian(ylim=c(-0.4,0.15)) +
ggtitle(paste0(model_str," Parameter Estimates")) +
ylab("Estimate") + xlab("") +
geom_hline(yintercept=0) +
scale_fill_manual(name="", labels = c("Threshold","Drift Rate"), values=colors.va2) +
scale_x_discrete(labels= c("Reward","Penalty","dACC-ctrl","dACC-sal","Str","AI")) +
ggposterior
plot.parameters.va.int
# Use test.params function to process trace info
output <- test.params(traces)
output %>% kbl() %>% kable_styling()
drift.rate<- output %>%
filter(parameter %in% c('v_Intercept','v_RewardLevel','v_PenaltyLevel','v_dACCctrl','v_Str','v_AI'))
threshold<- output %>%
filter(parameter %in% c('a_Intercept','a_RewardLevel','a_PenaltyLevel','a_dACCctrl','a_Str','a_AI'))
va <- rbind(drift.rate,threshold) %>%
separate(col = parameter, sep = "_", into = c("parameter","condition")) %>%
mutate(condition = factor(condition, levels = c("Intercept", "RewardLevel","PenaltyLevel","dACCctrl","dACCsal","Str","AI")),
parameter = factor(parameter, levels = c("a","v"), labels = c("Threshold","Drift Rate")))
va.sub <- va %>% filter(condition != "Intercept")
plot.parameters<-ggplot(data = va.sub, aes(x = parameter, y = Mean, fill = condition)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.5), width = 0.5) +
geom_errorbar(width = .1, linewidth = 1, position = position_dodge(width = .5), aes(ymin = CI_lower, ymax = CI_upper)) +
scale_y_continuous(labels = function(x) sprintf("%.1f", x)) +
coord_cartesian(ylim=c(-0.15,0.15)) +
ggtitle(paste0(model_str," Parameter Estimates")) +
ylab("Estimate") + xlab("") +
geom_hline(yintercept=0) +
#scale_fill_manual(name = "", labels = c("Reward","Penalty","Reward.Penalty"), values = colors.va3) +
ggposterior
plot.parameters
plot.parameters.va.int<-ggplot(data = va.sub, aes(x = condition, y = Mean, fill = parameter)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.5), width = 0.5, color = "black") +
geom_errorbar(width = .1, linewidth = 1, position = position_dodge(width = .5), aes(ymin = CI_lower, ymax = CI_upper)) +
scale_y_continuous(labels = function(x) sprintf("%.1f", x)) +
coord_cartesian(ylim=c(-0.4,0.15)) +
ggtitle(paste0(model_str," Parameter Estimates")) +
ylab("Estimate") + xlab("") +
geom_hline(yintercept=0) +
scale_fill_manual(name="", labels = c("Threshold","Drift Rate"), values=colors.va2) +
scale_x_discrete(labels= c("Reward","Penalty","dACC-ctrl","dACC-sal","Str","AI")) +
ggposterior
plot.parameters.va.int
# save parameter estimates figure
ggsave(filename = paste0(datapath.TCBmanuscript,"ddm/", model_str,"_parameters.png"), plot = plot.parameters, device = "png", width = 6, height = 5, scale = 1.2)
ggsave(filename = paste0(datapath.TCBmanuscript,"ddm/", model_str,"_parameters.eps"), plot = plot.parameters, device = cairo_ps, width = 6, height = 5, scale = 1.2)
ggsave(filename = paste0(datapath.TCBmanuscript,"ddm/", model_str,"_parameters_condition_int.png"), plot = plot.parameters.va.int, device = "png", width = 10, height = 8)
ggsave(filename = paste0(datapath.TCBmanuscript,"ddm/", model_str,"_parameters_condition_int.eps"), plot = plot.parameters.va.int, device = cairo_ps, width = 10, height = 8)
all_params<-output %>%
mutate(parameter = recode(parameter, "sv" = "v_IntertrialVar", "st" = "t_IntertrialVar", "t" = "t_Intercept")) %>%
separate(col = parameter, sep = "_", into = c("parameter","condition")) %>%
mutate(parameter = factor(parameter, levels = c("a","v","z","t"), labels = c("Threshold","Drift Rate","Bias","NDT")),
condition = factor(condition, levels = c("Intercept", "RewardLevel","PenaltyLevel","Congruency","IntertrialVar")))
all_params<-output %>%
mutate(parameter = dplyr::recode(parameter, "sv" = "v_IntertrialVar", "st" = "t_IntertrialVar", "t" = "t_Intercept")) %>%
separate(col = parameter, sep = "_", into = c("parameter","condition")) %>%
mutate(parameter = factor(parameter, levels = c("a","v","z","t"), labels = c("Threshold","Drift Rate","Bias","NDT")),
condition = factor(condition, levels = c("Intercept", "RewardLevel","PenaltyLevel","Congruency","IntertrialVar")))
all_params %>% kbl() %>% kable_styling()
plot.allparameters<-ggplot(data = all_params, aes(x = parameter, y = Mean, fill = condition)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.5), width = 0.5) +
geom_errorbar(width = .1, linewidth = 1, position = position_dodge(width = .5), aes(ymin = CI_lower, ymax = CI_upper)) +
scale_y_continuous(labels = function(x) sprintf("%.1f", x)) +
ggtitle(paste0(model_str," All Parameter Estimates")) +
ylab("Estimate") + xlab("") +
geom_hline(yintercept=0) +
ggposterior
plot.allparameters
# save parameter estimates figure
ggsave(filename = paste0(datapath.TCBmanuscript,"ddm/", model_str,"_allparameters.png"), plot = plot.allparameters, device = "png", width = 8, height = 6, scale = 1.2)
ggsave(filename = paste0(datapath.TCBmanuscript,"ddm/", model_str,"_allparameters.eps"), plot = plot.allparameters, device = cairo_ps, width = 8, height = 6, scale = 1.2)
# Model Name
model_str = "model22"
# Rhats
df.rhats<-fread(input = paste0(datapath.ddm,model_str,"/",model_str,"_RHat.csv"), header = TRUE)
# Model Name
model_str = "model21"
# Rhats
df.rhats<-fread(input = paste0(datapath.ddm,model_str,"/",model_str,"_RHat.csv"), header = TRUE)
# Model Name
model_str = "model21"
# Rhats
df.rhats<-fread(input = paste0(datapath.ddm,model_str,"/",model_str,"_RHat.csv"), header = TRUE)
colnames(df.rhats) = c("parameter","Rhat")
# Traces
df.traces<-fread(input = paste0(datapath.ddm,model_str,"/",model_str,"_traces.csv"))
# Set parameters for plots
myColors = brewer.pal(3,"Set2") #colors
barfill <- "#4271AE"
barlines <- "#1F3552"
plot.rhat=ggplot(df.rhats, aes(Rhat)) +
geom_histogram(colour = barlines, fill = barfill,binwidth = 0.01)+ #colour = barlines, fill = barfill
theme_bw() +
ggtitle(paste0(model_str," Rhats")) +
labs(x = "Rhat", y = "Count\n")+
theme(axis.line = element_line(linewidth = 1, colour = "black"),
panel.grid.major = element_line(colour = "grey", linewidth = 0.1,linetype = "dashed"),
panel.grid.minor = element_line(colour = "grey", linewidth = 0.1,linetype = "dashed"),
panel.border = element_blank(),
panel.background = element_blank(),
plot.title = element_text(size = 18,  face = "bold",hjust = 0.5),
text=element_text(colour="black", size = 14),
axis.text.x=element_text(colour="black", size = 14),
axis.text.y=element_text(colour="black", size = 14, face = "plain",hjust=0),
axis.title=element_text(size=18,colour = "black",vjust = 1))
plot.rhat
# save rhat figure
ggsave(filename = paste0(datapath.TCBmanuscript,"ddm/", model_str,"_rhat.png"), plot = plot.rhat, device = "png", width = 6, height = 5)
ggsave(filename = paste0(datapath.TCBmanuscript,"ddm/", model_str,"_rhat.eps"), plot = plot.rhat, device = cairo_ps, width = 6, height = 5)
# Print the names of the high Rhat parameters
highRhats = subset(df.rhats,df.rhats$Rhat>1.1)
if (nrow(highRhats) == 0) {
print("All Rhats are below 1.1")
} else {
print("Some Rhats higher than 1.1")
highRhats
}
# Select the traces for relevant group-level parameters. Note that threshold (a) needs to be divided by 2.
traces<-df.traces %>% dplyr::select(v_Intercept,
`v_C(RewardLevel, Sum)[S.High Reward]`,
`v_C(PenaltyLevel, Sum)[S.High Penalty]`,
`v_C(Congruency, Sum)[S.Congruent]`,
a_Intercept,
`a_C(RewardLevel, Sum)[S.High Reward]`,
`a_C(PenaltyLevel, Sum)[S.High Penalty]`,
a_scaledRunningTime,
`z_C(Congruency, Sum)[S.Congruent]`,
sv, st, t,
v_scaled_dACC_sal_interval,
a_scaled_dACC_sal_interval) %>%
dplyr::rename(v_RewardLevel = `v_C(RewardLevel, Sum)[S.High Reward]`,
v_PenaltyLevel = `v_C(PenaltyLevel, Sum)[S.High Penalty]`,
v_Congruency =`v_C(Congruency, Sum)[S.Congruent]`,
v_dACCctrl = v_scaled_dACC_ctrl_interval,
v_dACCsal = v_scaled_dACC_sal_interval,
a_RewardLevel = `a_C(RewardLevel, Sum)[S.High Reward]`,
a_PenaltyLevel = `a_C(PenaltyLevel, Sum)[S.High Penalty]`,
a_dACCsal = a_scaled_dACC_sal_interval,
z_Congruency = `z_C(Congruency, Sum)[S.Congruent]`) %>%
mutate(a_Intercept = 0.5*a_Intercept,
a_RewardLevel = 0.5*a_RewardLevel,
a_PenaltyLevel = 0.5*a_PenaltyLevel,
a_scaledRunningTime = 0.5*a_scaledRunningTime,
a_dACCsal = 0.5*a_dACCsal)
# Select the traces for relevant group-level parameters. Note that threshold (a) needs to be divided by 2.
traces<-df.traces %>% dplyr::select(v_Intercept,
`v_C(RewardLevel, Sum)[S.High Reward]`,
`v_C(PenaltyLevel, Sum)[S.High Penalty]`,
`v_C(Congruency, Sum)[S.Congruent]`,
a_Intercept,
`a_C(RewardLevel, Sum)[S.High Reward]`,
`a_C(PenaltyLevel, Sum)[S.High Penalty]`,
a_scaledRunningTime,
`z_C(Congruency, Sum)[S.Congruent]`,
sv, st, t,
v_scaled_dACC_sal_interval,
a_scaled_dACC_sal_interval) %>%
dplyr::rename(v_RewardLevel = `v_C(RewardLevel, Sum)[S.High Reward]`,
v_PenaltyLevel = `v_C(PenaltyLevel, Sum)[S.High Penalty]`,
v_Congruency =`v_C(Congruency, Sum)[S.Congruent]`,
v_dACCsal = v_scaled_dACC_sal_interval,
a_RewardLevel = `a_C(RewardLevel, Sum)[S.High Reward]`,
a_PenaltyLevel = `a_C(PenaltyLevel, Sum)[S.High Penalty]`,
a_dACCsal = a_scaled_dACC_sal_interval,
z_Congruency = `z_C(Congruency, Sum)[S.Congruent]`) %>%
mutate(a_Intercept = 0.5*a_Intercept,
a_RewardLevel = 0.5*a_RewardLevel,
a_PenaltyLevel = 0.5*a_PenaltyLevel,
a_scaledRunningTime = 0.5*a_scaledRunningTime,
a_dACCsal = 0.5*a_dACCsal)
# Extract the traces to plot
numSims = 5 # SET THIS PARAMETER BASED ON NUMBER OF SIMULATIONS
numTraces = dim(traces)[1]/numSims
index_traces = data.frame(ix1=1:5,ix2=(1:numSims)*numTraces)
index_traces$ix1[2:numSims] = index_traces$ix2[1:numSims-1]+1
# Extract traces for each simulation
plot_data1 = traces[index_traces[1,1]:index_traces[1,2]]
plot_data2 = traces[index_traces[2,1]:index_traces[2,2]]
plot_data3 = traces[index_traces[3,1]:index_traces[3,2]]
plot_data4 = traces[index_traces[4,1]:index_traces[4,2]]
plot_data5 = traces[index_traces[5,1]:index_traces[5,2]]
# For each parameter, plot the traces
colNames=names(traces)
for (parameter in colNames) { # for testing: parameter=colNames[1]
# plot traces
traces_plot = ggplot(NULL) +
geom_line(data=plot_data1, mapping = aes_string(y=parameter, x = 1:numTraces), colour="red") +         # Chain 1
geom_line(data=plot_data2, mapping = aes_string(y=parameter, x = 1:numTraces), colour="royalblue1") +  # Chain 2
geom_line(data=plot_data3, mapping = aes_string(y=parameter, x = 1:numTraces), colour="springgreen") + # Chain 3
geom_line(data=plot_data4, mapping = aes_string(y=parameter, x = 1:numTraces), colour="grey0") +       # Chain 4
geom_line(data=plot_data5, mapping = aes_string(y=parameter, x = 1:numTraces), colour="coral") +       # Chain 5
theme_classic(base_size = 18) +
ggtitle(parameter) +
ylab("Parameter value") + xlab("Sample")
plot_params <- ggplot(traces, aes_string(x = parameter)) +
geom_histogram(bins = 50) +
theme_classic()
#print(traces_plot)
grid.arrange(traces_plot, plot_params)
}
# Use test.params function to process trace info
output <- test.params(traces)
output %>% kbl() %>% kable_styling()
drift.rate<- output %>%
filter(parameter %in% c('v_Intercept','v_RewardLevel','v_PenaltyLevel','v_dACCsal','v_Str','v_AI'))
threshold<- output %>%
filter(parameter %in% c('a_Intercept','a_RewardLevel','a_PenaltyLevel','a_dACCsal','a_Str','a_AI'))
va <- rbind(drift.rate,threshold) %>%
separate(col = parameter, sep = "_", into = c("parameter","condition")) %>%
mutate(condition = factor(condition, levels = c("Intercept", "RewardLevel","PenaltyLevel","dACCctrl","dACCsal","Str","AI")),
parameter = factor(parameter, levels = c("a","v"), labels = c("Threshold","Drift Rate")))
va.sub <- va %>% filter(condition != "Intercept")
plot.parameters<-ggplot(data = va.sub, aes(x = parameter, y = Mean, fill = condition)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.5), width = 0.5) +
geom_errorbar(width = .1, linewidth = 1, position = position_dodge(width = .5), aes(ymin = CI_lower, ymax = CI_upper)) +
scale_y_continuous(labels = function(x) sprintf("%.1f", x)) +
coord_cartesian(ylim=c(-0.15,0.15)) +
ggtitle(paste0(model_str," Parameter Estimates")) +
ylab("Estimate") + xlab("") +
geom_hline(yintercept=0) +
#scale_fill_manual(name = "", labels = c("Reward","Penalty","Reward.Penalty"), values = colors.va3) +
ggposterior
plot.parameters
plot.parameters.va.int<-ggplot(data = va.sub, aes(x = condition, y = Mean, fill = parameter)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.5), width = 0.5, color = "black") +
geom_errorbar(width = .1, linewidth = 1, position = position_dodge(width = .5), aes(ymin = CI_lower, ymax = CI_upper)) +
scale_y_continuous(labels = function(x) sprintf("%.1f", x)) +
coord_cartesian(ylim=c(-0.15,0.15)) +
ggtitle(paste0(model_str," Parameter Estimates")) +
ylab("Estimate") + xlab("") +
geom_hline(yintercept=0) +
scale_fill_manual(name="", labels = c("Threshold","Drift Rate"), values=colors.va2) +
scale_x_discrete(labels= c("Reward","Penalty","dACC-ctrl","dACC-sal","Str","AI")) +
ggposterior
plot.parameters.va.int
# save parameter estimates figure
ggsave(filename = paste0(datapath.TCBmanuscript,"ddm/", model_str,"_parameters.png"), plot = plot.parameters, device = "png", width = 6, height = 5, scale = 1.2)
ggsave(filename = paste0(datapath.TCBmanuscript,"ddm/", model_str,"_parameters.eps"), plot = plot.parameters, device = cairo_ps, width = 6, height = 5, scale = 1.2)
ggsave(filename = paste0(datapath.TCBmanuscript,"ddm/", model_str,"_parameters_condition_int.png"), plot = plot.parameters.va.int, device = "png", width = 10, height = 8)
ggsave(filename = paste0(datapath.TCBmanuscript,"ddm/", model_str,"_parameters_condition_int.eps"), plot = plot.parameters.va.int, device = cairo_ps, width = 10, height = 8)
output %>% kbl() %>% kable_styling()
